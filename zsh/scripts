# bash

red='\e[0;31m'
RED='\e[1;31m'
blue='\e[0;34m'
BLUE='\e[1;34m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
NC='\e[0m'
green="\033[0;32m"
GREEN="\033[0;32m"
gray="\033[0;37m"
GRAY="\033[0;37m"
yellow="\033[0;33m"
YELLOW="\033[0;33m"
normal="\033[m"
NORMAL="\033[m"

############### k8s stuff

function kubekillzombies() {
  kubectl get pods --all-namespaces |
  grep -E 'Unknown|Completed|Evicted' |
  awk '{ printf "%s %s\n", $2, $1 }' |
  xargs -n2 sh -c 'kubectl delete pod $0 -n $1'
}

function watchzombies() {
  watch " kubectl get pods -owide --all-namespaces | grep -E 'Unknown|Completed|Evicted' "
} 

function setAwsCreds() {
  export AWS_CREDENTIAL_FILE=~/.aws/credentials
  export AWS_DEFAULT_REGION=$(aws --profile default configure get region | sed "s/$(printf '\r')\$//")
  export AWS_ACCESS_KEY_ID=$(aws --profile default configure get aws_access_key_id | sed "s/$(printf '\r')\$//")
  export AWS_SECRET_ACCESS_KEY=$(aws --profile default configure get aws_secret_access_key | sed "s/$(printf '\r')\$//")
  export AWS_SESSION_TOKEN=$(aws --profile default configure get aws_session_token | sed "s/$(printf '\r')\$//")
  export AWS_DEFAULT_REGION='us-east-1'
}

source <(kubectl completion zsh)

function kloghelp() {
 cat <<-END
Tails kubernetes pod logs for podname pattern, namespace & container name:
------
  -p The podname pattern to be matched
  -n The namespace of the pod (optional)
  -c The container name (optional)
END
}

function klog() {
  if [ $# -eq 0 ];
  then
      kloghelp
      return
  fi
  local container=''
  local podname_pattern=''
  local namespace=''
  local podname=''

  while getopts 'c:n:p:h' flag; do
    case "${flag}" in
      c) container=" -c ${OPTARG}" ;;
      n) namespace="-n ${OPTARG}" ;;
      p) podname_pattern="${OPTARG}" ;;
      h) kloghelp
         return ;;
    esac
  done
  command="kubectl get pods $namespace | grep $podname_pattern |  awk '{ print \$1 }' "
  podname=$(eval $command)
  eval "kubectl logs -f $podname $namespace $container"
}

function kshell() {
  if [ $# -eq 0 ];
  then
      kloghelp
      return
  fi
  local container=''
  local podname_pattern=''
  local namespace=''
  local podname=''

  while getopts 'c:n:p:h' flag; do
    case "${flag}" in
      c) container=" -c ${OPTARG}" ;;
      n) namespace="-n ${OPTARG}" ;;
      p) podname_pattern="${OPTARG}" ;;
      h) kloghelp
         return ;;
    esac
  done
  command="kubectl get pods $namespace | grep $podname_pattern |  awk '{ print \$1 }' "
  podname=$(eval $command)
  eval "kubectl -exec -it $podname $namespace $container -- sh"
}

function kenv() {
  if [ $# -eq 0 ];
  then
      kloghelp
      return
  fi
  local container=''
  local podname_pattern=''
  local namespace=''
  local podname=''

  while getopts 'c:n:p:h' flag; do
    case "${flag}" in
      c) container=" -c ${OPTARG}" ;;
      n) namespace="-n ${OPTARG}" ;;
      p) podname_pattern="${OPTARG}" ;;
      h) kloghelp
         return ;;
    esac
  done
  command="kubectl get pods $namespace | grep $podname_pattern |  awk '{ print \$1 }' "
  podname=$(eval $command)
  eval "kubectl exec -it $podname $namespace $container -- env"
}

function kubeps() {
  kubectl get pods --namespace $2 | \
  grep $1 | \
  awk '{ print $1 }' | \
  xargs -I % sh -c "echo 'Worker: ' %; kubectl exec % -it --namespace=$2 ps aux"
}

function nodestop() {
  kubectl get nodes --namespace $2 | grep Running | \
  grep $1 | \
  awk '{ print $1 }' | \
  xargs -I % sh -c "echo 'Worker: ' %; kubectl top pod % --namespace=$2"
}

function kubetop() {
  kubectl get pods --namespace $2 | grep Running | \
  grep $1 | \
  awk '{ print $1 }' | \
  xargs -I % sh -c "echo 'Worker: ' %; kubectl top pod % --namespace=$2"
}

function shellpod() {
  kubectl get pods --namespace $2 |  \
  grep $1 | \
  awk '{ print $1 }' | \
  xargs -o -I % kubectl exec -it %  --namespace $2 -- /bin/bash
}

color(){
  color=\$${1:-NORMAL}
  echo -ne "`eval echo ${color}`"
    cat
    echo -ne "${NORMAL}"
}

function ruby_version()
{
    if which rvm-prompt &> /dev/null; then
      rvm-prompt i v g
    else
      if which rbenv &> /dev/null; then
        rbenv version | sed -e "s/ (set.*$//"
      fi
    fi
}

growl() {
      local msg="\\e]9;\n\n${*}\\007"
      case $TERM in
        screen*)
          echo -ne '\eP'${msg}'\e\\' ;;
        *)
          echo -ne ${msg} ;;
      esac
      return
}

# notes!
function n() {   
    $EDITOR ~/notes/"$*".txt 
}  

function nls() {     
    ls -c ~/notes/ | grep "$*" 
}

function take () {
    mkdir $1
    cd $1
}

function extract()      # Handy Extract Program.
{
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xvjf $1     ;;
             *.tar.gz)    tar xvzf $1     ;;
             *.bz2)       bunzip2 $1      ;;
             *.rar)       unrar x $1      ;;
             *.gz)        gunzip $1       ;;
             *.tar)       tar xvf $1      ;;
             *.tbz2)      tar xvjf $1     ;;
             *.tgz)       tar xvzf $1     ;;
             *.zip)       unzip $1        ;;
             *.Z)         uncompress $1   ;;
             *.7z)        7z x $1         ;;
             *)           echo "'$1' cannot be extracted via >extract<" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

#-------------------------------------------------------------
# Process/system related functions:
#-------------------------------------------------------------


function my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,command ; }
function pp() { my_ps | awk '!/awk/ && $0~var' var=${1:-".*"} ; }


function killps()                 # Kill by process name.
{
    local pid pname sig="-TERM"   # Default signal.
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: killps [-SIGNAL] pattern"
        return;
    fi
    if [ $# = 2 ]; then sig=$1 ; fi
    for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} ) ; do
        pname=$(my_ps | awk '$1~var { print $5 }' var=$pid )
        if ask "Kill process $pid <$pname> with signal $sig?"
            then kill $sig $pid
        fi
    done
}

function ii()   # Get current host related info.
{
    echo -e "\nYou are logged on ${RED}$HOST"
    echo -e "\nAdditionnal information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date :$NC " ; date
    echo -e "\n${RED}Machine stats :$NC " ; uptime
    echo -e "\n${RED}Memory stats :$NC " ; free
    my_ip 2>&- ;
    echo -e "\n${RED}Local IP Address :$NC" ; echo ${MY_IP:-"Not connected"}
    echo -e "\n${RED}ISP Address :$NC" ; echo ${MY_ISP:-"Not connected"}
    echo -e "\n${RED}Open connections :$NC "; netstat -pan --inet;
    echo
}

. ~/bin/dotfiles/local/local_scripts
